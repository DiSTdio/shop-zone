total 880

drwxr-xr-x 1 0 Jan 12 14:56 node_modules/
-rw-r--r-- 1 Jan 12 14:56 package.json
-rw-r--r-- 1 Jan 12 14:51 package-lock.json
drwxr-xr-x 1 Jan 26 09:13 public/
drwxr-xr-x 1 Mar 20 09:54 src/
./public
./public/index.html
./src
./src/App.js
./src/assets
./src/assets/fallback.jpg
./src/assets/product2.jpg
./src/assets/product3.jpg
./src/assets/product4.jpg
./src/assets/takeThatInfo.txt
./src/components
./src/components/Cart.js
./src/components/Checkout.js
./src/components/OrderHistory.js
./src/components/ProductCard.js
./src/components/ProductGrid.js
./src/components/Profile.js
./src/config.js
./src/context
./src/context/CartContext.js
./src/index.js
./src/styles
./src/styles/styles.css
./src/utils
./src/utils/priceFilter.js



shop-zone-react\public\index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShopZone React</title>
</head>
<body>
    <div id="root"></div>
</body>
</html>

shop-zone-react\src\components\Cart.js
import React, { useContext } from "react";
import { CartContext } from "../context/CartContext";

function Cart({ onGoToCheckout }) {
    const { cart, addToCart, removeFromCart, deleteProductFromCart } = useContext(CartContext);

    return (
        <div className="cart-container">
            <h2>Your Cart</h2>
            
            {cart.length === 0 ? (
                <p>Your cart is empty.</p>
            ) : (
                <>
                    <ul>
                        {cart.map((item, index) => (
                            <li key={index}>
                                {item.name} - üí≤{item.price.toFixed(2)} √ó {item.quantity}
                                <button onClick={() => addToCart(item)}>‚ûï</button>
                                <button onClick={() => removeFromCart(item.id)}>‚ûñ</button>
                                <button onClick={() => deleteProductFromCart(item.id)}>üóëÔ∏è</button>
                            </li>
                        ))}
                    </ul>
                    <button className="checkout-button" onClick={onGoToCheckout}>Go to Checkout</button>
                </>
            )}
        </div>
    );
}

export default Cart;
shop-zone-react\src\components\Checkout.js
// import React, { useState, useContext, useEffect } from "react";
// import { CartContext } from "../context/CartContext";

// function Checkout({ onGoBack, onGoToOrders }) {
//     const { cart, setCart } = useContext(CartContext);
//     const [name, setName] = useState("");
//     const [email, setEmail] = useState("");
//     const [address, setAddress] = useState("");
//     const [error, setError] = useState("");
//     const [loading, setLoading] = useState(false);
//     const [orderSuccess, setOrderSuccess] = useState(false);
//     const [orderNumber, setOrderNumber] = useState("");

//     useEffect(() => {
//         // ‚úÖ Auto-fill checkout form with saved profile data
//         const savedProfile = localStorage.getItem("profile");
//         if (savedProfile) {
//             const { name, email, address } = JSON.parse(savedProfile);
//             setName(name);
//             setEmail(email);
//             setAddress(address);
//         }
//     }, []);

//     const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);

//     const handleSubmit = (e) => {
//         e.preventDefault();
//         if (!name || !email || !address) {
//             setError("Please fill in all fields.");
//             return;
//         }

//         setError("");
//         setLoading(true);

//         setTimeout(() => {
//             setLoading(false);
//             setOrderSuccess(true);
//             const orderNumber = Math.floor(100000 + Math.random() * 900000);
//             const orderDate = new Date().toLocaleString();

//             const newOrder = { id: Date.now(), orderNumber, date: orderDate, items: cart, total: totalPrice };
//             const savedOrders = localStorage.getItem("orders");
//             const orders = savedOrders ? JSON.parse(savedOrders) : [];
//             orders.push(newOrder);
//             localStorage.setItem("orders", JSON.stringify(orders));

//             setCart([]);
//             localStorage.removeItem("cart");
//         }, 2000);
//     };

//     return (
//         <div className="checkout-container">
//             <h2>Checkout</h2>

//             {orderSuccess ? (
//                 <div className="order-success">
//                     <h3>üéâ Order Placed Successfully!</h3>
//                     <p>Order Number: <strong>#{orderNumber}</strong></p>
//                     <button onClick={onGoToOrders}>View Orders</button>
//                     <button onClick={onGoBack}>Back to Shop</button>
//                 </div>
//             ) : (
//                 <>
//                     <h3>Cart Summary</h3>
//                     <ul>
//                         {cart.map((item, index) => (
//                             <li key={index}>
//                                 {item.name} - ${item.price.toFixed(2)} √ó {item.quantity}
//                             </li>
//                         ))}
//                     </ul>
//                     <h3>Total: ${totalPrice}</h3>

//                     {loading ? (
//                         <div className="loading-spinner">Processing payment...</div>
//                     ) : (
//                         <form onSubmit={handleSubmit}>
//                             {error && <p className="error">{error}</p>}
//                             <input type="text" placeholder="Full Name" value={name} onChange={(e) => setName(e.target.value)} />
//                             <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
//                             <input type="text" placeholder="Shipping Address" value={address} onChange={(e) => setAddress(e.target.value)} />
//                             <button type="submit">Place Order</button>
//                         </form>
//                     )}

//                     <button onClick={onGoBack}>Back to Cart</button>
//                 </>
//             )}
//         </div>
//     );
// }

// export default Checkout;
import React, { useState, useContext } from "react";
import { CartContext } from "../context/CartContext";

function Checkout({ onGoBack, onGoToOrders }) {
    const { cart, setCart } = useContext(CartContext);
    const [loading, setLoading] = useState(false);
    const [orderSuccess, setOrderSuccess] = useState(false);

    const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);

    const handleSubmit = (e) => {
        e.preventDefault();
        setLoading(true);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        setLoading(false);
        setOrderSuccess(true);
        const orderNumber = Math.floor(100000 + Math.random() * 900000);
        const orderDate = new Date().toLocaleString();

        const newOrder = { id: Date.now(), orderNumber, date: orderDate, items: cart, total: totalPrice };
        const savedOrders = localStorage.getItem("orders");
        const orders = savedOrders ? JSON.parse(savedOrders) : [];
        orders.push(newOrder);
        localStorage.setItem("orders", JSON.stringify(orders));

        console.log("Cart cleared in Checkout"); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∑–¥–µ—Å—å
        setCart([]);
        localStorage.removeItem("cart");
    };

    if (loading) {
        return <p>Processing your order...</p>;
    }

    if (orderSuccess) {
        return (
            <div>
                <h2>Order Successful!</h2>
                <p>Your order number is: {Math.floor(100000 + Math.random() * 900000)}</p>
                <button onClick={onGoToOrders}>View Orders</button>
            </div>
        );
    }

    return (
        <div className="checkout-container">
            <h2>Checkout</h2>
            {cart.length === 0 ? (
                <p>Your cart is empty.</p>
            ) : (
                <>
                    <ul>
                        {cart.map((item, index) => (
                            <li key={index}>
                                {item.name} - {item.price.toFixed(2)} √ó {item.quantity}
                            </li>
                        ))}
                    </ul>
                    <p>Total: {totalPrice.toFixed(2)}</p>
                    <form onSubmit={handleSubmit}>
                        <button type="submit">Place Order</button>
                    </form>
                    <button onClick={onGoBack}>Back to Cart</button>
                </>
            )}
        </div>
    );
}

export default Checkout;

shop-zone-react\src\components\OrderHistory.js
import React, { useState, useEffect } from "react";

function OrderHistory({ onGoBack }) {
    const [orders, setOrders] = useState([]);

    useEffect(() => {
        // ‚úÖ Load orders from localStorage
        const savedOrders = localStorage.getItem("orders");
        setOrders(savedOrders ? JSON.parse(savedOrders) : []);
    }, []);

    const handleDeleteOrder = (orderId) => {
        const confirmed = window.confirm("Are you sure you want to delete this order?");
        if (!confirmed) return;

        const updatedOrders = orders.filter((order) => order.id !== orderId);
        setOrders(updatedOrders);
        localStorage.setItem("orders", JSON.stringify(updatedOrders));
    };

    return (
        <div className="order-history-container">
            <h2>üì¶ Your Orders</h2>
            {orders.length === 0 ? (
                <p>No past orders found.</p>
            ) : (
                <ul>
                    {orders.map((order) => (
                        <li key={order.id}>
                            <h3>üõí Order #{order.orderNumber}</h3>
                            <p>üìÖ Placed on: <strong>{order.date || "Unknown Date"}</strong></p>
                            <ul>
                                {order.items.map((item, i) => (
                                    <li key={i}>
                                        {item.name} - üí≤{item.price.toFixed(2)} √ó {item.quantity}
                                    </li>
                                ))}
                            </ul>
                            <p><strong>Total:</strong> üíµ ${order.total}</p>
                            <button className="delete-order" onClick={() => handleDeleteOrder(order.id)}>‚ùå Delete Order</button>
                            <hr />
                        </li>
                    ))}
                </ul>
            )}
            <button onClick={onGoBack}>üîô Back to Shop</button>
        </div>
    );
}

export default OrderHistory;

shop-zone-react\src\components\ProductCard.js
import React, { useContext } from "react";
import { CartContext } from "../context/CartContext";

function ProductCard({ id, name, price, category, image }) {
    const { addToCart } = useContext(CartContext);

    return (
        <div className="product-card" data-category={category}>
            <img src={image} alt={name} />
            <h3>{name}</h3>
            <p>${price.toFixed(2)}</p>
            <button onClick={() => addToCart({ id, name, price, category, image })}>
                Add to Cart
            </button>
        </div>
    );
}

export default ProductCard;

shop-zone-react\src\components\ProductGrid.js
import React, { useState, useEffect, useMemo } from "react";
import ProductCard from "./ProductCard";
import { API_URL } from "../config";
// import { handleMinPriceChange,handleMaxPriceChange } from "..priceFilter.js";
import { handleMinPriceChange, handleMaxPriceChange } from "../utils/priceFilter";

function ProductGrid() {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [selectedCategory, setSelectedCategory] = useState("all");
    const [minPrice, setMinPrice] = useState("");
    const [maxPrice, setMaxPrice] = useState("");

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                const response = await fetch(API_URL);
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const data = await response.json();
                if (!data.products) throw new Error("Unexpected API response");

                const formattedProducts = data.products.map((product) => ({
                    id: product.id,
                    name: product.title,
                    price: product.price,
                    image: product.image,
                    category: product.category || "Unknown",
                }));

                setProducts(formattedProducts);
                setLoading(false);

                const prices = formattedProducts.map((p) => p.price);
                setMinPrice(Math.min(...prices));
                setMaxPrice(Math.max(...prices));
            } catch (err) {
                console.error("Fetch error:", err);
                setError("Could not load products. Please try again later.");
                setLoading(false);
                }
        };

        if (products.length === 0) fetchProducts(); //  Fetching only if products are empty
    }, [products]); // dependency array prevents infinite re-fetching

    const categories = useMemo(() => ["all", ...new Set(products.map((p) => p.category))], [products]);
   
    const filteredProducts = products.filter((product) => {
        const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory === "all" || product.category === selectedCategory;
        const matchesMinPrice = minPrice === "" || product.price >= parseFloat(minPrice);
        const matchesMaxPrice = maxPrice === "" || product.price <= parseFloat(maxPrice);
        return matchesSearch && matchesCategory && matchesMinPrice && matchesMaxPrice;
    });

    if (loading) return <p className="loading">Loading products...</p>;
    if (error) return <p className="error">{error}</p>;

    return (
        <div>
            <div className="search-container">
                <input type="text" placeholder="Search products..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
            </div>

            <div className="filter-container">
                <label htmlFor="category">Filter by Category:</label>
                <select id="category" value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
                    {categories.map((category) => (
                        <option key={category} value={category}>{category.toUpperCase()}</option>
                    ))}
                </select>
            </div>

            <div className="price-filter">
                <label>Min Price:</label>
                <input
                    type="number"
                    placeholder="Min"
                    value={minPrice}
                    onChange={(e) => handleMinPriceChange(e, setMinPrice, setMaxPrice, products, minPrice, maxPrice)}
                />
                <label>Max Price:</label>
                <input
                    type="number"
                    placeholder="Max"
                    value={maxPrice}
                    onChange={(e) => handleMaxPriceChange(e, setMinPrice, setMaxPrice, products, minPrice, maxPrice)}
                />
            </div>
            

            <div className="product-grid">
                {filteredProducts.map((product) => (
                    <ProductCard key={product.id} id={product.id} name={product.name} price={product.price} category={product.category} image={product.image} />
                ))}
            </div>
        </div>
    );
}

export default ProductGrid;

shop-zone-react\src\components\Profile.js
import React, { useState, useEffect } from "react";

function Profile({ onGoBack }) {
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [address, setAddress] = useState("");

    useEffect(() => {
        // ‚úÖ Load saved profile data
        const savedProfile = localStorage.getItem("profile");
        if (savedProfile) {
            const { name, email, address } = JSON.parse(savedProfile);
            setName(name);
            setEmail(email);
            setAddress(address);
        }
    }, []);

    const handleSave = () => {
        const profileData = { name, email, address };
        localStorage.setItem("profile", JSON.stringify(profileData));
        alert("Profile saved successfully!");
    };

    return (
        <div className="profile-container">
            <h2>üë§ Your Profile</h2>
            <input type="text" placeholder="Full Name" value={name} onChange={(e) => setName(e.target.value)} />
            <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
            <input type="text" placeholder="Shipping Address" value={address} onChange={(e) => setAddress(e.target.value)} />
            <button onClick={handleSave}>üíæ Save Profile</button>
            <button onClick={onGoBack}>üîô Back</button>
        </div>
    );
}

export default Profile;
	
shop-zone-react\src\context\CartContext.js
// import React, { createContext, useState, useEffect } from "react";

// export const CartContext = createContext();

// export const CartProvider = ({ children }) => {
//     const [cart, setCart] = useState(() => {
//         const savedCart = localStorage.getItem("cart");
//         if (savedCart) {
//             try {
//                 return JSON.parse(savedCart);
//             } catch (error) {
//                 console.error("Error parsing cart:", error);
//                 return [];
//             }
//         }
//         return [];
//     });

//     useEffect(() => {
//         localStorage.setItem("cart", JSON.stringify(cart));
//         console.log("Cart in context updated:", cart);
//         console.log("CartContext setCart called", cart);
//     }, [cart]);

//     const addToCart = (product) => {
//         setCart((prevCart) => {
//             const existingProduct = prevCart.find((item) => item.id === product.id);
//             return existingProduct
//                 ? prevCart.map((item) =>
//                       item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
//                   )
//                 : [...prevCart, { ...product, quantity: 1 }]; // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//         });
//         console.log("Product added", product.id);
//     };

//     const removeFromCart = (productId) => {
//         setCart((prevCart) => {
//             const itemToUpdate = prevCart.find((item) => item.id === productId);
//             if (itemToUpdate && itemToUpdate.quantity > 1) {
//                 return prevCart.map((item) =>
//                     item.id === productId ? { ...item, quantity: item.quantity - 1 } : item
//                 );
//             } else {
//                 return prevCart.filter((item) => item.id !== productId); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//             }
//         });
//         console.log("CartContext setCart called after removing minus 1", localStorage.getItem('cart'));
//     };

//     const deleteProductFromCart = (productId) => {
//         setCart((prevCart) => prevCart.filter((item) => item.id !== productId)); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//         console.log("CartContext setCart called after deleting", localStorage.getItem('cart'));
//     };

//     return (
//         <CartContext.Provider value={{ cart, addToCart, removeFromCart, deleteProductFromCart, setCart }}>
//             {children}
//         </CartContext.Provider>
//     );
// };
import React, { createContext, useReducer, useEffect } from "react";

export const CartContext = createContext();

const cartReducer = (state, action) => {
    switch (action.type) {
        case "ADD_TO_CART":
            const existingProduct = state.find((item) => item.id === action.payload.id);
            return existingProduct
                ? state.map((item) =>
                      item.id === action.payload.id ? { ...item, quantity: item.quantity + 1 } : item
                  )
                : [...state, { ...action.payload, quantity: 1 }];
        case "REMOVE_FROM_CART":
            const itemToUpdate = state.find((item) => item.id === action.payload);
            if (itemToUpdate && itemToUpdate.quantity > 1) {
                return state.map((item) =>
                    item.id === action.payload ? { ...item, quantity: item.quantity - 1 } : item
                );
            } else {
                return state.filter((item) => item.id !== action.payload);
            }
        case "DELETE_PRODUCT_FROM_CART":
            return state.filter((item) => item.id !== action.payload);
        default:
            return state;
    }
};

export const CartProvider = ({ children }) => {
    const [cart, dispatch] = useReducer(cartReducer, [], () => {
        const savedCart = localStorage.getItem("cart");
        if (savedCart) {
            try {
                return JSON.parse(savedCart);
            } catch (error) {
                console.error("Error parsing cart:", error);
                return [];
            }
        }
        return [];
    });

    useEffect(() => {
        localStorage.setItem("cart", JSON.stringify(cart));
        console.log("Cart in context updated:", cart);
    }, [cart]);

    const addToCart = (product) => {
        dispatch({ type: "ADD_TO_CART", payload: product });
        console.log("Product added", product.id);
    };

    const removeFromCart = (productId) => {
        dispatch({ type: "REMOVE_FROM_CART", payload: productId });
        console.log("CartContext setCart called after removing minus 1", localStorage.getItem('cart'));
    };

    const deleteProductFromCart = (productId) => {
        dispatch({ type: "DELETE_PRODUCT_FROM_CART", payload: productId });
        console.log("CartContext setCart called after deleting", localStorage.getItem('cart'));
    };

    return (
        <CartContext.Provider value={{ cart, addToCart, removeFromCart, deleteProductFromCart }}>
            {children}
        </CartContext.Provider>
    );
};

shop-zone-react\src\styles\styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #333;
    color: white;
}

header .logo {
    font-size: 24px;
    font-weight: bold;
}

header nav {
    display: flex;
    gap: 10px;
}

header nav button {
    background-color: #333;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

header nav button:hover {
    background-color: #555;
}

header nav ul {
    list-style: none;
    display: flex;
    margin: 0;
    padding: 0;
}

header nav ul li {
    margin: 0 15px;
}

header nav ul li a {
    color: white;
    text-decoration: none;
}

main {
    padding: 20px;
}

footer {
    text-align: center;
    padding: 10px;
    background-color: #333;
    color: white;
}

.product-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    padding: 20px 0;
}

.product-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    width: 300px;
    text-align: center;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.product-card img {
    width: 100%;
    height: auto;
}

.product-card h3 {
    font-size: 18px;
    margin: 10px 0;
}

.product-card p {
    font-size: 16px;
    color: #333;
    margin-bottom: 10px;
}

.cart-container {
    margin: 20px auto;
    max-width: 600px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.cart-container ul {
    list-style-type: none;
    padding: 0;
}

.cart-container li {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.cart-container h3 {
    text-align: right;
    color: #333;
}

.checkout-container {
    max-width: 500px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.checkout-container ul {
    list-style-type: none;
    padding: 0;
}

.checkout-container li {
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

.checkout-container input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.checkout-container button {
    width: 100%;
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 4px;
    margin-top: 15px;
}

.checkout-container button:hover {
    background-color: #218838;
}

.error {
    color: red;
    font-weight: bold;
}

/* Order Success Box */
.order-success {
    text-align: center;
    background-color: #d4edda;
    padding: 20px;
    border-radius: 5px;
    border: 1px solid #c3e6cb;
}

.order-success h3 {
    color: #155724;
}

.order-success strong {
    font-size: 18px;
    color: #155724;
}

/* Loading Spinner */
.loading-spinner {
    text-align: center;
    font-size: 18px;
    color: #007bff;
    font-weight: bold;
    margin-top: 20px;
}
.order-history-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.order-history-container h2 {
    text-align: center;
    color: #007bff;
}

.order-history-container ul {
    list-style-type: none;
    padding: 0;
}

.order-history-container li {
    padding: 15px;
    border-bottom: 1px solid #ddd;
    background: #f9f9f9;
    border-radius: 5px;
    margin-bottom: 10px;
}

.order-history-container li h3 {
    margin-bottom: 5px;
    color: #333;
}

.order-history-container li p {
    font-size: 14px;
    color: #555;
}

.delete-order {
    background-color: red;
    color: white;
    border: none;
    padding: 8px;
    font-size: 14px;
    cursor: pointer;
    border-radius: 4px;
    margin-top: 10px;
}

.delete-order:hover {
    background-color: darkred;
}

/* üåû Light Theme (Default) */
:root {
    --bg-color: #fff;
    --text-color: #333;
    --btn-bg: #007bff;
    --btn-text: white;
}

/* üåô Dark Theme */
.dark-mode {
    --bg-color: #1e1e1e;
    --text-color: #f5f5f5;
    --btn-bg: #ff9800;
    --btn-text: black;
}/* üåû Light Theme (Default) */
:root {
    --bg-color: #fff;
    --text-color: #333;
    --btn-bg: #007bff;
    --btn-text: white;
}

/* üåô Dark Theme */
.dark-mode {
    --bg-color: #1e1e1e;
    --text-color: #f5f5f5;
    --btn-bg: #ff9800;
    --btn-text: black;
}
.dark-mode .product-card {
    background-color: #333;  /* Darken cards */
    color: white;
}

/* +Apply Theme Colors */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background-color: #f4f4f4;
    background-color: var(--bg-color);
    color: var(--text-color);
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* fix for themes */
.product-card h3, .product-card p {
    color: var(--text-color); /* Now visible in light/dark mode */
}

button {
    background-color: var(--btn-bg);
    color: var(--btn-text);
    border: none;
    font-size: 16px;
    padding: 10px 15px;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    filter: brightness(1.2);
}

/* Header and Navigation */
header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #333;
    color: white;
}

nav button {
    background: none;
    border: none;
    color: white;
    font-size: 16px;
    cursor: pointer;
    margin-left: 20px;
}

nav button:hover {
    text-decoration: underline;
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    padding: 20px;
}

.product-card {
    background-color: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}


.product-card img {
    width: 100%;
    height: 200px;
    object-fit: contain;
    border-radius: 8px;
}

.product-card h3 {
    font-size: 18px;
    margin: 10px 0;
}

.product-card p {
    font-size: 16px;
    color: #333;
    margin-bottom: 10px;
}

.product-card button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.product-card:hover {
    transform: scale(1.03);
    box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2);
}

/* Cart & Checkout Containers */
.cart-container, .checkout-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

/* Cart & Checkout List */
.cart-container ul, .checkout-container ul {
    list-style: none;
    padding: 0;
}

.cart-container li, .checkout-container li {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

button {
    background-color: #0057b3a2;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.2s ease;
}

.checkout-button {
    background-color: #0057b3a2;
    color: white;
    border: none;
    padding: 10px;
    width: 100%;
    cursor: pointer;
    border-radius: 4px;
}

button:hover {
    background-color: #0057b3a2;
}

.checkout-button:hover {
    background-color: #0057b3a2;
}

.back-button {
    background-color: #6c757d;
    color: white;
    border: none;
    padding: 10px;
    width: 100%;
    cursor: pointer;
    border-radius: 4px;
}

.back-button:hover {
    background-color: #5a6268;
}


.cart-counter {
    background-color: 5a6268;
    color: rgb(255, 255, 255);
    border-radius: 50%;
    padding: 4px 8px;
    font-size: 14px;
    margin-left: 5px;
}

.checkout-button {
    width: 100%;
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 4px;
    margin-top: 15px;
}

.checkout-button:hover {
    background-color: #218838;
}

.filters {
    margin-bottom: 20px;
    text-align: center;
    flex-flow: row wrap;
}

.filters label {
    font-size: 16px;
    margin-right: 10px;
}

/*  Now the dropdown looks clean & easy to use!?.. */
.filter-container {
    text-align: center;
    margin-bottom: 20px;
}

.filter-container label {
    font-size: 16px;
    margin-right: 10px;
}

.filter-container select {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 5px;
}
/* ...!? */

/* Price Filter */
.price-filter {
    text-align: center;
    margin-bottom: 20px;
}

.price-filter input {
    width: 100px;
    padding: 8px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin: 0 10px;
}

#category {
    margin-right: 10px;
    margin-bottom: 10px;
}

.filters select {
    padding: 5px 10px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.custom-price-inputs {
    margin-top: 10px;
    display: flex;
    gap: 20px;
    justify-content: center;
    flex-wrap: wrap;
}

.custom-price-inputs input {
    font-size: 16px;
    padding: 8px 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 120px;
    background-color: #fff;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    outline: none;
    transition: box-shadow 0.3s ease;
}

.custom-price-inputs input:hover,
.custom-price-inputs input:focus {
    border-color: #666;
    box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.2);
}

/* search bar */
.search-container {
    text-align: center;
    margin-bottom: 20px;
}

.search-container input {
    width: 80%;
    max-width: 400px;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.2s ease-in-out;
}

.search-container input:focus {
    outline: none;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
}   

/* fade-in effects when products load */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.product-card {
    animation: fadeIn 0.5s ease-in-out;
}

/* media */

@media (max-width: 600px) {
    .filters {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .filters label, 
    .filters select, 
    .custom-price-inputs {
        width: 100%;
        max-width: 300px;
    }
}

.loading, .error {
    text-align: center;
    font-size: 18px;
    margin-top: 20px;
    color: #333;
}

.error {
    color: red;
}


@keyframes flash {
    0% {
        transform: scale(1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    50% {
        transform: scale(1.05);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
}

.flash {
    animation: flash 0.5s ease-in-out;
}

/* mini movement  */
@keyframes fadeOut {
    from {
        opacity: 1;
        transform: translateX(0);
    }
    to {
        opacity: 0;
        transform: translateX(-20px);
    }
}

.fade-out {
    animation: fadeOut 0.3s forwards;
}


shop-zone-react\src\utils\priceFilter.js
export const handleMinPriceChange = (e, setMinPrice, setMaxPrice, products) => {
    let newMin = parseFloat(e.target.value) || 0;

    const realMin = Math.min(...products.map((p) => p.price));
    const realMax = Math.max(...products.map((p) => p.price));

    if (isNaN(newMin)) newMin = realMin;
    if (newMin < realMin) newMin = realMin;
    if (newMin > realMax) newMin = realMax;

    setMinPrice(newMin);
    setMaxPrice((prevMax) => Math.max(newMin, prevMax)); // Ensure max is always >= min
};

export const handleMaxPriceChange = (e, setMinPrice, setMaxPrice, products) => {
    let newMax = parseFloat(e.target.value) || Infinity;

    const realMin = Math.min(...products.map((p) => p.price));
    const realMax = Math.max(...products.map((p) => p.price));

    if (isNaN(newMax)) newMax = realMax;
    if (newMax > realMax) newMax = realMax;
    if (newMax < realMin) newMax = realMin;

    setMaxPrice(newMax);
    setMinPrice((prevMin) => Math.min(newMax, prevMin)); // Ensure min is always <= max
};

shop-zone-react\src\App.js
// import React, { useState, useContext, useEffect, useRef } from "react";
// import ProductGrid from "./components/ProductGrid";
// import Cart from "./components/Cart";
// import Checkout from "./components/Checkout";
// import OrderHistory from "./components/OrderHistory";
// import Profile from "./components/Profile";
// import { CartProvider, CartContext } from "./context/CartContext";
// import "./styles/styles.css";

// function App() {
//     console.log("App component rendered");
//     const [view, setView] = useState("products");
//     const { cart } = useContext(CartContext);
//     const [cartCount, setCartCount] = useState(0);
//     const [darkMode, setDarkMode] = useState(false);
//     const cartCounterRef = useRef(null); // –î–æ–±–∞–≤–ª—è–µ–º useRef

//     useEffect(() => {
//         const savedTheme = localStorage.getItem("darkMode");
//         if (savedTheme === "true") {
//             document.body.classList.add("dark-mode");
//             setDarkMode(true);
//         }
//     }, []);

//     useEffect(() => {
//         setCartCount(cart.reduce((total, item) => total + item.quantity, 0));
//         console.log("useEffect running with cart:", cart);
//         console.log("App useEffect triggered", cart);
//         console.log("Cart count:", cartCount);
//         if (cartCounterRef.current) {
//             cartCounterRef.current.textContent = cartCount; // –û–±–Ω–æ–≤–ª—è–µ–º textContent —á–µ—Ä–µ–∑ ref
//             console.log("Cart counter textContent updated:", cartCounterRef.current.textContent);
//         }
//     }, [cart]);

//     const toggleDarkMode = () => {
//         const newMode = !darkMode;
//         setDarkMode(newMode);
//         localStorage.setItem("darkMode", newMode);
//         document.body.classList.toggle("dark-mode", newMode);
//     };

//     return (
//         <CartProvider>
//             <div className="App">
//                 <header>
//                     <h1>ShopZone</h1>
//                     <nav>
//                         <button onClick={() => setView("products")}>Products</button>
//                         <button onClick={() => setView("cart")}>
//                             Cart <span className="cart-counter" ref={cartCounterRef}>{cartCount}</span> {/* –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º ref */}
//                         </button>
//                         <button onClick={() => setView("orders")}>Orders</button>
//                         <button onClick={() => setView("profile")}>Profile</button>
//                         <button onClick={toggleDarkMode}>
//                             {darkMode ? "‚òÄÔ∏è Light Mode" : " Dark Mode"}
//                         </button>
//                     </nav>
//                 </header>
//                 <main>
//                     {view === "products" && <ProductGrid />}
//                     {view === "cart" && <Cart onGoToCheckout={() => setView("checkout")} />}
//                     {view === "checkout" && <Checkout onGoBack={() => setView("cart")} onGoToOrders={() => setView("orders")} />}
//                     {view === "orders" && <OrderHistory onGoBack={() => setView("products")} />}
//                     {view === "profile" && <Profile onGoBack={() => setView("products")} />}
//                 </main>
//             </div>
//         </CartProvider>
//     );
// }

// export default App;
import React, { useState, useContext, useEffect, useRef } from "react";
import ProductGrid from "./components/ProductGrid";
import Cart from "./components/Cart";
import Checkout from "./components/Checkout";
import OrderHistory from "./components/OrderHistory";
import Profile from "./components/Profile";
import { CartProvider, CartContext } from "../context/CartContext"; // Corrected path
import "../styles/styles.css"; // Corrected path

function App() {
    console.log("App component rendered");
    const [view, setView] = useState("products");
    const { cart } = useContext(CartContext);
    const [darkMode, setDarkMode] = useState(false); // Added darkMode state
    const cartCounterRef = useRef(null);

    useEffect(() => {
        const savedTheme = localStorage.getItem("darkMode");
        if (savedTheme === "true") {
            document.body.classList.add("dark-mode");
            setDarkMode(true);
        }
    },);

    useEffect(() => {
        const cartCount = cart.reduce((total, item) => total + item.quantity, 0);
        if (cartCounterRef.current) {
            cartCounterRef.current.textContent = cartCount;
        }
        console.log("Cart count updated:", cartCount);
    }, [cart]);

    const toggleDarkMode = () => { // Added toggleDarkMode function
        const newMode = !darkMode;
        setDarkMode(newMode);
        document.body.classList.toggle("dark-mode", newMode);
        localStorage.setItem("darkMode", newMode);
    };

    return (
        <CartProvider>
            <div className="App">
                <header>
                    <h1>ShopZone</h1>
                    <nav>
                        <button onClick={() => setView("products")}>Products</button>
                        <button onClick={() => setView("cart")}>
                            Cart <span className="cart-counter" ref={cartCounterRef}>0</span>
                        </button>
                        <button onClick={() => setView("orders")}>Orders</button>
                        <button onClick={() => setView("profile")}>Profile</button>
                        <button onClick={toggleDarkMode}>
                            {darkMode ? "‚òÄÔ∏è Light Mode" : " Dark Mode"}
                        </button>
                    </nav>
                </header>
                <main>
                    {view === "products" && <ProductGrid />}
                    {view === "cart" && <Cart onGoToCheckout={() => setView("checkout")} />}
                    {view === "checkout" && <Checkout onGoBack={() => setView("cart")} onGoToOrders={() => setView("orders")} />}
                    {view === "orders" && <OrderHistory onGoBack={() => setView("products")} />}
                    {view === "profile" && <Profile onGoBack={() => setView("products")} />}
                </main>
            </div>
        </CartProvider>
    );
}

export default App;

shop-zone-react\src\config.js
export const API_URL = "https://fakestoreapi.in/api/products";

shop-zone-react\src\index.js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { CartProvider } from "./context/CartContext";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
    <React.StrictMode>
        <CartProvider>
            <App />
        </Cart Provider>
    </React.StrictMode>
);
